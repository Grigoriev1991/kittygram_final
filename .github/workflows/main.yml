name: Kittygram Workflow (main)

on:
  push:
    branches:
      - main

jobs:

  backend_tests:
    name: running tests for backend
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.8']
    steps:
        - name: Add Kittygram to runner
          uses: actions/checkout@v3
        - name: Configuring Python
          uses: actions/setup-python@v4
          with:
            python-version: ${{ matrix.python-version }}
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install flake8==6.1.0
            pip install flake8-isort==6.1.0
            pip install -r ./backend/requirements.txt
        - name: Run Flake8 tests
          run: python -m flake8 backend/
        - name: Run django tests
          env:
            POSTGRES_USER: test_user
            POSTGRES_PASSWORD: test_password
            POSTGRES_DB: test_db
            DB_HOST: 127.0.0.1
            DB_PORT: 5432
          run: |
            cd backend/
            python manage.py test

  frontend_tests:
    name: Run frontend tests
    runs-on: ubuntu-latest
    steps:
      - name: Add Kittygram to runner
        uses: actions/checkout@v3
      - name: Set up NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: |
          cd frontend/
          npm ci
      - name: Run frontend tests
        run : |
          cd frontend/
          npm run test

  build_and_push_kittygram_images:
    name: Build backend, frontend and gateway images and push to the DockerHub
    needs:
      - backend_tests
      - frontend_tests
    runs-on: ubuntu-latest
    steps:
      - name: Add Kittygram to runner
        uses: actions/checkout@v3
      - name: Configuring Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login on DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Push backend image to the Dockerhub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: True
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_backend:latest
      - name: Push frontend image to the Dockerhub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: True
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_frontend:latest
      - name: Push gateway image to the Dockerhub
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: True
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_gateway:latest

  deploy_on_server:
    name: Deploy Kittygram on server
    needs: build_and_push_kittygram_images
    runs-on: ubuntu-latest
    steps:
      - name: Add Kittygram to runner
        uses: actions/checkout@v3
      - name: Copy docker-compose.yml to server via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.yml"
          target: "kittygram"
      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd kittygram
            sudo docker compose pull
            sudo docker compose down
            sudo docker compose up -d
            sudo docker compose exec backend python manage.py makemigrations cats
            sudo docker compose exec backend python manage.py migrate
            sudo docker compose exec backend python manage.py collectstatic
            sudo docker compose exec backend cp -r /kittygram/collect_static/. /backend_static/static/
            sudo systemctl restart nginx

  send_message_telegram:
    name: Send message to telegram
    needs: deploy_on_server
    runs-on: ubuntu-latest
    steps:
      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_ME_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: Деплой "Kittygram" завершён успешно!
