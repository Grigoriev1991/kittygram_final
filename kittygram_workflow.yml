name: Kittygram Workflow (main)

on:
  push:
    branches:
      - main

jobs:

  backend_tests:
    name: running tests for backend
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.8']
    steps:
        - name: Add Kittygram to runner
          uses: actions/checkout@v3
        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: ${{ matrix.python-version }}
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install flake8==6.1.0
            pip install flake8-isort==6.1.0
            pip install -r ./backend/requirements.txt
        - name: Test with flake8 and django tests
          env:
            POSTGRES_USER: django_user
            POSTGRES_PASSWORD: django_password
            POSTGRES_DB: django_db
            DB_HOST: 127.0.0.1
            DB_PORT: 5432
          run: |
            python -m flake8 backend/
            cd backend/
            python manage.py test

  frontend_tests:
    name: Run frontend tests
    runs-on: ubuntu-latest
    steps:
      - name: Add Kittygram to runner
        uses: actions/checkout@v3
      - name: Set up NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: |
          cd frontend/
          npm ci
      - name: Run frontend tests
        run : |
          cd frontend/
          npm run test

  build_and_push_kittygram_images:
    name: Build backend, frontend and gateway images and push to the DockerHub
    needs:
      - backend_tests
      - frontend_tests
    runs-on: ubuntu-latest
    steps:
      - name: Add Kittygram to runner
        uses: actions/checkout@v3
      - name: Configuring Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login on DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Push backend image to the Dockerhub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: grigoriev1991/kittygram_backend:latest
      - name: Push frontend image to the Dockerhub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: grigoriev1991/kittygram_frontend:latest
      - name: Push gateway image to the Dockerhub
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: grigoriev1991/kittygram_gateway:latest

  deploy_on_server:
    name: Deploy Kittygram on server
    needs: build_and_push_kittygram_images
    runs-on: ubuntu-latest
    steps:
      - name: Add Kittygram to runner
        uses: actions/checkout@v3
      - name: Copy docker-compose.production.yml to server via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "kittygram"
      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd kittygram
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
            sudo docker compose -f docker-compose.production.yml exec backend cp -r /kittygram/collect_static/. /backend_static/static/

  send_message_telegram:
    name: Send message to telegram
    needs: deploy_on_server
    runs-on: ubuntu-latest
    steps:
      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_ME_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: Деплой "Kittygram" завершён успешно!
